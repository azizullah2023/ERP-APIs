using Inspire.Erp.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;



namespace Inspire.Erp.Web.MODULE
{
  public static class clsAccountAndStock
  {

    //===================================PurchaseVoucher==========================================
    public static void PurchaseVoucher_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, PurchaseVoucher MASTER, List<PurchaseVoucherDetails> DTLS, ref List<StockRegister> STOCK, ref List<AccountsTransactions> ACC)

    {
      for (int i = 0; i < DTLS.Count; i++)
      {
        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

               // long ? StockRegisterId,
                 0,
                //              string StockRegisterVoucherNo,
                 "",
                //     string StockRegisterTransType,
                 "",
                //      DateTime ? StockRegisterVoucherDate,
                  Convert.ToDateTime(MASTER.PurchaseVoucherPurchaseDate),
                //     string StockRegisterRemarks,
                 MASTER.PurchaseVoucherDescription,
                //     decimal ? StockRegisterSno,
                i,
                //       long ? StockRegisterMatId,
                    DTLS[i].PurchaseVoucherDetailsMaterialId,

          //     int ? StockRegisterUnitId,
          DTLS[i].PurchaseVoucherDetailsUnitId,

         //     decimal ? StockRegisterQuantity,
         DTLS[i].PurchaseVoucherDetailsQuantity,
          //     decimal ? StockRegisterSin,
          DTLS[i].PurchaseVoucherDetailsQuantity,
         //     decimal ? StockRegisterSout,
        0,
          //     string StockRegisterStatus,
          "",
         //      string StockRegisterBatchCode,
         "",
         //     decimal ? StockRegisterRate,
         DTLS[i].PurchaseVoucherDetailsRate,
          //     decimal ? StockRegisterFcRate,
          DTLS[i].PurchaseVoucherDetailsRate,
         //   decimal ? StockRegisterAmount,
         DTLS[i].PurchaseVoucherDetailsRate * DTLS[i].PurchaseVoucherDetailsQuantity,
         //   decimal ? StockRegisterFCAmount,
         DTLS[i].PurchaseVoucherDetailsRate * DTLS[i].PurchaseVoucherDetailsQuantity,
          //     Double ? StockRegisterLandingCost,
          DTLS[i].PurchaseVoucherDetailsRate * DTLS[i].PurchaseVoucherDetailsQuantity,
           //int ? StockRegisterLocationID,
           MASTER.PurchaseVoucherLocationID,
          //      int ? StockRegisterFsno,
          1,
           //     int StockRegisterDepId,
           0,
            //       int StockRegisterJobId,
            MASTER.PurchaseVoucherJobID,

        //      DateTime ? StockRegisterExpDate,
        null,
          //     double ? StockRegisterNetStkBal,
          0,
         //      bool ? StockRegisterDelStatus
         false

            ));

      }



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


           //          long AccountsTransactionsTransSno,
           0,
          //  string ? AccountsTransactionsAccNo,
          AccountSettings.VAT_PAY_ACCOUNT,// "VAT"
                // DateTime ? AccountsTransactionsTransDate,
          Convert.ToDateTime(MASTER.PurchaseVoucherPurchaseDate),
       //string AccountsTransactionsParticulars,
       "VAT" + MASTER.PurchaseVoucherDescription, 
        //decimal AccountsTransactionsDebit,
        Convert.ToDecimal(MASTER.PurchaseVoucherVATAmount),

  //decimal AccountsTransactionsCredit,
  0,
//decimal ? AccountsTransactionsFcDebit,
MASTER.PurchaseVoucherVATAmount,
 //decimal ? AccountsTransactionsFcCredit,
 0,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.PurchaseVoucherVoucherNo,
           //string AccountsTransactionsDescription,
           MASTER.PurchaseVoucherDescription,
        //long AccountsTransactionsUserId,
        Convert.ToInt64(MASTER.PurchaseVoucherUserID),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.PurchaseVoucherPurchaseRef,
    //decimal AccountsTransactionsFsno,
    Convert.ToDecimal(MASTER.PurchaseVoucherFSNO),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
    //decimal ? AccountsTransactionsAllocBalance,
    MASTER.PurchaseVoucherVATAmount,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
   //decimal ? AccountsTransactionsFcAllocBalance,
   MASTER.PurchaseVoucherVATAmount,
   //int ? AccountsTransactionsLocation,
   MASTER.PurchaseVoucherLocationID,
 //long ? AccountsTransactionsJobNo,
 MASTER.PurchaseVoucherJobID,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.PurchaseVoucherFCRate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.PurchaseVoucherCompanyID,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.PurchaseVoucherCurrencyID,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.PurchaseVoucherDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.PurchaseVoucherPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.PurchaseVoucherTotalGrossAmt,
//  bool ? AccountstransactionsDelStatus
false

));


      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


           //          long AccountsTransactionsTransSno,
           0,
         //  string ? AccountsTransactionsAccNo,
         AccountSettings.STOCK_ACCOUNT,//"STOCK"
                                       // DateTime ? AccountsTransactionsTransDate,
          Convert.ToDateTime(MASTER.PurchaseVoucherPurchaseDate),
      //string AccountsTransactionsParticulars,
      "STOCK"+   MASTER.PurchaseVoucherDescription,
     //decimal AccountsTransactionsDebit,
     Convert.ToDecimal(MASTER.PurchaseVoucherActualAmount),
        //decimal AccountsTransactionsCredit,
        0,
       //decimal ? AccountsTransactionsFcDebit,
       MASTER.PurchaseVoucherActualAmount,
       //decimal ? AccountsTransactionsFcCredit,
       0,
       //string AccountsTransactionsVoucherType,
       "",
                    //string AccountsTransactionsVoucherNo,
                    MASTER.PurchaseVoucherVoucherNo,
                 //string AccountsTransactionsDescription,
                 MASTER.PurchaseVoucherDescription,
          //long AccountsTransactionsUserId,
          Convert.ToInt64(MASTER.PurchaseVoucherUserID),
             //string AccountsTransactionsStatus,
             "",
             //DateTime AccountsTransactionsTstamp,
             DateTime.Now,
           //string RefNo,
           MASTER.PurchaseVoucherPurchaseRef,
          //decimal AccountsTransactionsFsno,
          Convert.ToInt64(MASTER.PurchaseVoucherFSNO),
         //decimal ? AccountsTransactionsAllocDebit,
         0,
         //decimal ? AccountsTransactionsAllocCredit,
         0,
         //decimal ? AccountsTransactionsAllocBalance,
         MASTER.PurchaseVoucherActualAmount,
         //decimal ? AccountsTransactionsFcAllocDebit,
         0,
         //decimal ? AccountsTransactionsFcAllocCredit,
         0,
          //decimal ? AccountsTransactionsFcAllocBalance,
          MASTER.PurchaseVoucherActualAmount,
         //int ? AccountsTransactionsLocation,
         MASTER.PurchaseVoucherLocationID,
       //long ? AccountsTransactionsJobNo,
       MASTER.PurchaseVoucherJobID,
           //long ? AccountsTransactionsCostCenterId,
           null,
           //DateTime ? AccountsTransactionsApprovalDt,
           DateTime.Now,
          //int ? AccountsTransactionsDepartment,
          null,
          //decimal ? AccountsTransactionsFcRate,
          MASTER.PurchaseVoucherFCRate,
         //int ? AccountsTransactionsCompanyId,
         MASTER.PurchaseVoucherCompanyID,
        //int ? AccountsTransactionsCurrencyId,
        MASTER.PurchaseVoucherCurrencyID,
       //double ? AccountsTransactionsDrGram,
       0,
       //double ? AccountsTransactionsCrGram,
       0,
       //string AccountsTransactionsCheqNo,
       null,
       //string AccountsTransactionsLpoNo,
       null,
       //DateTime ? AccountsTransactionsCheqDate,
       null,
       //string AccountsTransactionsOpposEntryDesc,
       MASTER.PurchaseVoucherDescription,
      //  double ? AccountsTransactionsAllocUpdateBal,
      0,
      // long ? AccountsTransactionsDeptId,
      0,
       //  string AccountsTransactionsVatno,
       MASTER.PurchaseVoucherPartyVatNo,
       //  decimal ? AccountsTransactionsVatableAmount,
       MASTER.PurchaseVoucherTotalGrossAmt,
      //  bool ? AccountstransactionsDelStatus
      false

));



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


              //          long AccountsTransactionsTransSno,
              0,
            //  string ? AccountsTransactionsAccNo,
            AccountSettings.PURCHASE_CASH_ACCOUNT,//"CASH"
                                                  // DateTime ? AccountsTransactionsTransDate,
             (DateTime)MASTER.PurchaseVoucherPurchaseDate,
         //string AccountsTransactionsParticulars,
         "CASH" + MASTER.PurchaseVoucherDescription,
         //decimal AccountsTransactionsDebit,
         0,
       //decimal AccountsTransactionsCredit,
       Convert.ToDecimal(MASTER.PurchaseVoucherNetAmount),
          //decimal ? AccountsTransactionsFcDebit,
          0,
          //decimal ? AccountsTransactionsFcCredit,
          MASTER.PurchaseVoucherNetAmount,
          //string AccountsTransactionsVoucherType,
          "",
                       //string AccountsTransactionsVoucherNo,
                       MASTER.PurchaseVoucherVoucherNo,
                    //string AccountsTransactionsDescription,
                    MASTER.PurchaseVoucherDescription,
                 //long AccountsTransactionsUserId,
                 Convert.ToInt64(MASTER.PurchaseVoucherUserID),
                //string AccountsTransactionsStatus,
                "",
                //DateTime AccountsTransactionsTstamp,
                DateTime.Now,
              //string RefNo,
              MASTER.PurchaseVoucherPurchaseRef,
              //decimal AccountsTransactionsFsno,
              Convert.ToInt64(MASTER.PurchaseVoucherFSNO),
            //decimal ? AccountsTransactionsAllocDebit,
            0,
            //decimal ? AccountsTransactionsAllocCredit,
            MASTER.PurchaseVoucherNetAmount,
            //decimal ? AccountsTransactionsAllocBalance,
            0,
            //decimal ? AccountsTransactionsFcAllocDebit,
            0,
            //decimal ? AccountsTransactionsFcAllocCredit,
            MASTER.PurchaseVoucherNetAmount,
            //decimal ? AccountsTransactionsFcAllocBalance,
            0,
            //int ? AccountsTransactionsLocation,
            MASTER.PurchaseVoucherLocationID,
          //long ? AccountsTransactionsJobNo,
          MASTER.PurchaseVoucherJobID,
              //long ? AccountsTransactionsCostCenterId,
              null,
              //DateTime ? AccountsTransactionsApprovalDt,
              DateTime.Now,
             //int ? AccountsTransactionsDepartment,
             null,
             //decimal ? AccountsTransactionsFcRate,
             MASTER.PurchaseVoucherFCRate,
            //int ? AccountsTransactionsCompanyId,
            MASTER.PurchaseVoucherCompanyID,
           //int ? AccountsTransactionsCurrencyId,
           MASTER.PurchaseVoucherCurrencyID,
          //double ? AccountsTransactionsDrGram,
          0,
          //double ? AccountsTransactionsCrGram,
          0,
          //string AccountsTransactionsCheqNo,
          null,
          //string AccountsTransactionsLpoNo,
          null,
          //DateTime ? AccountsTransactionsCheqDate,
          null,
          //string AccountsTransactionsOpposEntryDesc,
          MASTER.PurchaseVoucherDescription,
         //  double ? AccountsTransactionsAllocUpdateBal,
         0,
         // long ? AccountsTransactionsDeptId,
         0,
          //  string AccountsTransactionsVatno,
          MASTER.PurchaseVoucherPartyVatNo,
          //  decimal ? AccountsTransactionsVatableAmount,
          MASTER.PurchaseVoucherTotalGrossAmt,
         //  bool ? AccountstransactionsDelStatus
         false

    ));
      if (MASTER.PurchaseVoucherVATRoundAmount != 0)
      {
        ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


                     //          long AccountsTransactionsTransSno,
                     0,
                    //  string ? AccountsTransactionsAccNo,
                    AccountSettings.ROUND_OFF_ACCOUNT,//"ROUD OFF"
                                                      // DateTime ? AccountsTransactionsTransDate,
                   Convert.ToDateTime(MASTER.PurchaseVoucherPurchaseDate),
                 //string AccountsTransactionsParticulars,
                 "ROUD OFF" + MASTER.PurchaseVoucherDescription,
                //decimal AccountsTransactionsDebit,
                MASTER.PurchaseVoucherVATRoundSign != "-" ? Convert.ToDecimal(MASTER.PurchaseVoucherVATRoundAmount) : 0,
                    //decimal AccountsTransactionsCredit,
                    MASTER.PurchaseVoucherVATRoundSign != "+" ? Convert.ToDecimal(MASTER.PurchaseVoucherVATRoundAmount) : 0,
              //decimal ? AccountsTransactionsFcDebit,
              MASTER.PurchaseVoucherVATRoundSign != "-" ? MASTER.PurchaseVoucherVATRoundAmount : 0,
                  //decimal ? AccountsTransactionsFcCredit,
                  MASTER.PurchaseVoucherVATRoundSign != "+" ? MASTER.PurchaseVoucherVATRoundAmount : 0,
                 //string AccountsTransactionsVoucherType,
                 "",
                              //string AccountsTransactionsVoucherNo,
                              MASTER.PurchaseVoucherVoucherNo,
                           //string AccountsTransactionsDescription,
                           MASTER.PurchaseVoucherDescription,
                        //long AccountsTransactionsUserId,
                        Convert.ToInt64(MASTER.PurchaseVoucherUserID),
                       //string AccountsTransactionsStatus,
                       "",
                       //DateTime AccountsTransactionsTstamp,
                       DateTime.Now,
                     //string RefNo,
                     MASTER.PurchaseVoucherPurchaseRef,
                     //decimal AccountsTransactionsFsno,
                     Convert.ToInt64(MASTER.PurchaseVoucherFSNO),
                   //decimal ? AccountsTransactionsAllocDebit,
                   0,
                   //decimal ? AccountsTransactionsAllocCredit,
                   0,
                   //decimal ? AccountsTransactionsAllocBalance,
                   MASTER.PurchaseVoucherVATRoundAmount,
                   //decimal ? AccountsTransactionsFcAllocDebit,
                   0,
                   //decimal ? AccountsTransactionsFcAllocCredit,
                   0,
                  //decimal ? AccountsTransactionsFcAllocBalance,
                  MASTER.PurchaseVoucherVATRoundAmount,
                   //int ? AccountsTransactionsLocation,
                   MASTER.PurchaseVoucherLocationID,
                 //long ? AccountsTransactionsJobNo,
                 MASTER.PurchaseVoucherJobID,
                     //long ? AccountsTransactionsCostCenterId,
                     null,
                     //DateTime ? AccountsTransactionsApprovalDt,
                     DateTime.Now,
                    //int ? AccountsTransactionsDepartment,
                    null,
                    //decimal ? AccountsTransactionsFcRate,
                    MASTER.PurchaseVoucherFCRate,
                   //int ? AccountsTransactionsCompanyId,
                   MASTER.PurchaseVoucherCompanyID,
                  //int ? AccountsTransactionsCurrencyId,
                  MASTER.PurchaseVoucherCurrencyID,
                 //double ? AccountsTransactionsDrGram,
                 0,
                 //double ? AccountsTransactionsCrGram,
                 0,
                 //string AccountsTransactionsCheqNo,
                 null,
                 //string AccountsTransactionsLpoNo,
                 null,
                 //DateTime ? AccountsTransactionsCheqDate,
                 null,
                 //string AccountsTransactionsOpposEntryDesc,
                 MASTER.PurchaseVoucherDescription,
                //  double ? AccountsTransactionsAllocUpdateBal,
                0,
                // long ? AccountsTransactionsDeptId,
                0,
                 //  string AccountsTransactionsVatno,
                 MASTER.PurchaseVoucherPartyVatNo,
                 //  decimal ? AccountsTransactionsVatableAmount,
                 MASTER.PurchaseVoucherTotalGrossAmt,
                //  bool ? AccountstransactionsDelStatus
                false

   ));
      }
    }

    //===================================PurchaseVoucher==========================================


    //===================================PurchaseReturn==========================================
    public static void PurchaseReturn_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, PurchaseReturn MASTER, 
                                                                  List<PurchaseReturnDetails> DTLS, ref List<StockRegister> STOCK, 
                                                                  ref List<AccountsTransactions> ACC,decimal? convertedValue, decimal? currencyRate)

    {
      for (int i = 0; i < DTLS.Count; i++)
      {
        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

         // long ? StockRegisterId,
         0,
         //              string StockRegisterVoucherNo,
         "",
         //     string StockRegisterTransType,
         "",
          //      DateTime ? StockRegisterVoucherDate,
          MASTER.PurchaseReturnDate,
         //     string StockRegisterRemarks,
         MASTER.PurchaseReturnDescription,
        //     decimal ? StockRegisterSno,
        i,
            //       long ? StockRegisterMatId,
            DTLS[i].PurchaseReturnDetailsMatId,

          //     int ? StockRegisterUnitId,
          DTLS[i].PurchaseReturnDetailsUnitId,

         //     decimal ? StockRegisterQuantity,
         DTLS[i].PurchaseReturnDetailsQuantity,
         //     decimal ? StockRegisterSin,
         0,
        //     decimal ? StockRegisterSout,
        // DTLS[i].PurchaseReturnDetailsRate * DTLS[i].PurchaseReturnDetailsQuantity,
        DTLS[i].PurchaseReturnDetailsQuantity,
          //     string StockRegisterStatus,
          "",
         //      string StockRegisterBatchCode,
         "",
         //     decimal ? StockRegisterRate,
         DTLS[i].PurchaseReturnDetailsRate,
          //     decimal ? StockRegisterFcRate,
          //DTLS[i].PurchaseReturnDetailsRate,
          currencyRate,
         //   decimal ? StockRegisterAmount,
         DTLS[i].PurchaseReturnDetailsRate * DTLS[i].PurchaseReturnDetailsQuantity,
          //   decimal ? StockRegisterFCAmount,
          //DTLS[i].PurchaseReturnDetailsRate * DTLS[i].PurchaseReturnDetailsQuantity,
          convertedValue,
          //     Double ? StockRegisterLandingCost,
          DTLS[i].PurchaseReturnDetailsRate * DTLS[i].PurchaseReturnDetailsQuantity,
           //int ? StockRegisterLocationID,
           MASTER.PurchaseReturnLocationId,
          //      int ? StockRegisterFsno,
          1,
           //     int StockRegisterDepId,
           0,
            //       int StockRegisterJobId,
            MASTER.PurchaseReturnJobId,

        //      DateTime ? StockRegisterExpDate,
        null,
          //     double ? StockRegisterNetStkBal,
          0,
         //      bool ? StockRegisterDelStatus
         false

            ));

      }



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
    //  string ? AccountsTransactionsAccNo,
    AccountSettings.VAT_PAY_ACCOUNT,// "VAT"
                                    // DateTime ? AccountsTransactionsTransDate,
    MASTER.PurchaseReturnDate,
 //string AccountsTransactionsParticulars,
 "VAT", //+ MASTER.PurchaseReturnDescription,
//decimal AccountsTransactionsDebit,
0,
  //decimal AccountsTransactionsCredit,
  Convert.ToDecimal(MASTER.PurchaseReturnVatAmt),
  //decimal ? AccountsTransactionsFcDebit,
  0,
 //decimal ? AccountsTransactionsFcCredit,
 MASTER.PurchaseReturnVatAmt,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.PurchaseReturnNo,
           //string AccountsTransactionsDescription,
           MASTER.PurchaseReturnDescription,
        //long AccountsTransactionsUserId,
        Convert.ToInt64(MASTER.PurchaseReturnUserId),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.PurchaseReturnRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToDecimal(MASTER.PurchaseReturnFsno),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
    //decimal ? AccountsTransactionsAllocBalance,
    MASTER.PurchaseReturnVatAmt,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.PurchaseReturnVatAmt,
   //int ? AccountsTransactionsLocation,
   MASTER.PurchaseReturnLocationId,
 //long ? AccountsTransactionsJobNo,
 MASTER.PurchaseReturnJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.PurchaseReturnFcRate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.PurchaseReturnCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.PurchaseReturnCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.PurchaseReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.PurchaseReturnPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.PurchaseReturnTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));


      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
   //  string ? AccountsTransactionsAccNo,
   AccountSettings.STOCK_ACCOUNT,//"STOCK"
                                 // DateTime ? AccountsTransactionsTransDate,
    MASTER.PurchaseReturnDate,
//string AccountsTransactionsParticulars,
"STOCK", //+ MASTER.PurchaseReturnDescription,
//decimal AccountsTransactionsDebit,
0,
  //decimal AccountsTransactionsCredit,
  Convert.ToDecimal(MASTER.PurchaseReturnTotalActualAmount),
 //decimal ? AccountsTransactionsFcDebit,
 0,
 //decimal ? AccountsTransactionsFcCredit,
 MASTER.PurchaseReturnTotalActualAmount,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.PurchaseReturnNo,
           //string AccountsTransactionsDescription,
           MASTER.PurchaseReturnDescription,
    //long AccountsTransactionsUserId,
    Convert.ToInt64(MASTER.PurchaseReturnUserId),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.PurchaseReturnRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToInt64(MASTER.PurchaseReturnFsno),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
   //decimal ? AccountsTransactionsAllocBalance,
   MASTER.PurchaseReturnTotalActualAmount,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.PurchaseReturnTotalActualAmount,
   //int ? AccountsTransactionsLocation,
   MASTER.PurchaseReturnLocationId,
 //long ? AccountsTransactionsJobNo,
 MASTER.PurchaseReturnJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.PurchaseReturnFcRate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.PurchaseReturnCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.PurchaseReturnCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.PurchaseReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.PurchaseReturnPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.PurchaseReturnTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


              //          long AccountsTransactionsTransSno,
              0,
            //  string ? AccountsTransactionsAccNo,
            AccountSettings.PURCHASE_CASH_ACCOUNT,//"CASH"
                                                  // DateTime ? AccountsTransactionsTransDate,
             MASTER.PurchaseReturnDate,
         //string AccountsTransactionsParticulars,
         "CASH", //+ MASTER.PurchaseReturnDescription,
         //decimal AccountsTransactionsDebit,
         Convert.ToDecimal(MASTER.PurchaseReturnNetAmount),
       //decimal AccountsTransactionsCredit,
       0,
          //decimal ? AccountsTransactionsFcDebit,
          MASTER.PurchaseReturnNetAmount,
          //decimal ? AccountsTransactionsFcCredit,
          0,
          //string AccountsTransactionsVoucherType,
          "",
                       //string AccountsTransactionsVoucherNo,
                       MASTER.PurchaseReturnNo,
                    //string AccountsTransactionsDescription,
                    MASTER.PurchaseReturnDescription,
                 //long AccountsTransactionsUserId,
                 Convert.ToInt64(MASTER.PurchaseReturnUserId),
                //string AccountsTransactionsStatus,
                "",
                //DateTime AccountsTransactionsTstamp,
                DateTime.Now,
              //string RefNo,
              MASTER.PurchaseReturnRefNo,
              //decimal AccountsTransactionsFsno,
              Convert.ToInt64(MASTER.PurchaseReturnFsno),
            //decimal ? AccountsTransactionsAllocDebit,
            MASTER.PurchaseReturnNetAmount,
            //decimal ? AccountsTransactionsAllocCredit,
            0,
            //decimal ? AccountsTransactionsAllocBalance,
            0,
            //decimal ? AccountsTransactionsFcAllocDebit,
            MASTER.PurchaseReturnNetAmount,
            //decimal ? AccountsTransactionsFcAllocCredit,
            0,
            //decimal ? AccountsTransactionsFcAllocBalance,
            0,
            //int ? AccountsTransactionsLocation,
            MASTER.PurchaseReturnLocationId,
          //long ? AccountsTransactionsJobNo,
          MASTER.PurchaseReturnJobId,
              //long ? AccountsTransactionsCostCenterId,
              null,
              //DateTime ? AccountsTransactionsApprovalDt,
              DateTime.Now,
             //int ? AccountsTransactionsDepartment,
             null,
             //decimal ? AccountsTransactionsFcRate,
             MASTER.PurchaseReturnFcRate,
            //int ? AccountsTransactionsCompanyId,
            MASTER.PurchaseReturnCompanyId,
           //int ? AccountsTransactionsCurrencyId,
           MASTER.PurchaseReturnCurrencyId,
          //double ? AccountsTransactionsDrGram,
          0,
          //double ? AccountsTransactionsCrGram,
          0,
          //string AccountsTransactionsCheqNo,
          null,
          //string AccountsTransactionsLpoNo,
          null,
          //DateTime ? AccountsTransactionsCheqDate,
          null,
          //string AccountsTransactionsOpposEntryDesc,
          MASTER.PurchaseReturnDescription,
         //  double ? AccountsTransactionsAllocUpdateBal,
         0,
         // long ? AccountsTransactionsDeptId,
         0,
          //  string AccountsTransactionsVatno,
          MASTER.PurchaseReturnPartyVatNo,
          //  decimal ? AccountsTransactionsVatableAmount,
          MASTER.PurchaseReturnTotalGrossAmount,
         //  bool ? AccountstransactionsDelStatus
         false

    ));

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


           //          long AccountsTransactionsTransSno,
           0,
          //  string ? AccountsTransactionsAccNo,
          AccountSettings.ROUND_OFF_ACCOUNT,//"ROUD OFF"
                                            // DateTime ? AccountsTransactionsTransDate,
          MASTER.PurchaseReturnDate,
       //string AccountsTransactionsParticulars,
       "ROUD OFF", //+ MASTER.PurchaseReturnDescription,
      //decimal AccountsTransactionsDebit,
      MASTER.PurchaseReturnVatRoundSign != "+" ? Convert.ToDecimal(MASTER.PurchaseReturnVatRountAmt) : 0,
          //decimal AccountsTransactionsCredit,
          MASTER.PurchaseReturnVatRoundSign != "-" ? Convert.ToDecimal(MASTER.PurchaseReturnVatRountAmt) : 0,
    //decimal ? AccountsTransactionsFcDebit,
    MASTER.PurchaseReturnVatRoundSign != "+" ? MASTER.PurchaseReturnVatRountAmt : 0,
        //decimal ? AccountsTransactionsFcCredit,
        MASTER.PurchaseReturnVatRoundSign != "-" ? MASTER.PurchaseReturnVatRountAmt : 0,
       //string AccountsTransactionsVoucherType,
       "",
                    //string AccountsTransactionsVoucherNo,
                    MASTER.PurchaseReturnNo,
                 //string AccountsTransactionsDescription,
                 MASTER.PurchaseReturnDescription,
              //long AccountsTransactionsUserId,
              Convert.ToInt64(MASTER.PurchaseReturnUserId),
             //string AccountsTransactionsStatus,
             "",
             //DateTime AccountsTransactionsTstamp,
             DateTime.Now,
           //string RefNo,
           MASTER.PurchaseReturnRefNo,
           //decimal AccountsTransactionsFsno,
           Convert.ToInt64(MASTER.PurchaseReturnFsno),
         //decimal ? AccountsTransactionsAllocDebit,
         0,
         //decimal ? AccountsTransactionsAllocCredit,
         0,
         //decimal ? AccountsTransactionsAllocBalance,
         MASTER.PurchaseReturnVatRountAmt,
         //decimal ? AccountsTransactionsFcAllocDebit,
         0,
         //decimal ? AccountsTransactionsFcAllocCredit,
         0,
        //decimal ? AccountsTransactionsFcAllocBalance,
        MASTER.PurchaseReturnVatRountAmt,
         //int ? AccountsTransactionsLocation,
         MASTER.PurchaseReturnLocationId,
       //long ? AccountsTransactionsJobNo,
       MASTER.PurchaseReturnJobId,
           //long ? AccountsTransactionsCostCenterId,
           null,
           //DateTime ? AccountsTransactionsApprovalDt,
           DateTime.Now,
          //int ? AccountsTransactionsDepartment,
          null,
          //decimal ? AccountsTransactionsFcRate,
          MASTER.PurchaseReturnFcRate,
         //int ? AccountsTransactionsCompanyId,
         MASTER.PurchaseReturnCompanyId,
        //int ? AccountsTransactionsCurrencyId,
        MASTER.PurchaseReturnCurrencyId,
       //double ? AccountsTransactionsDrGram,
       0,
       //double ? AccountsTransactionsCrGram,
       0,
       //string AccountsTransactionsCheqNo,
       null,
       //string AccountsTransactionsLpoNo,
       null,
       //DateTime ? AccountsTransactionsCheqDate,
       null,
       //string AccountsTransactionsOpposEntryDesc,
       MASTER.PurchaseReturnDescription,
      //  double ? AccountsTransactionsAllocUpdateBal,
      0,
      // long ? AccountsTransactionsDeptId,
      0,
       //  string AccountsTransactionsVatno,
       MASTER.PurchaseReturnPartyVatNo,
       //  decimal ? AccountsTransactionsVatableAmount,
       MASTER.PurchaseReturnTotalGrossAmount,
      //  bool ? AccountstransactionsDelStatus
      false

 ));

    }




    //===================================PurchaseReturn==========================================




    //===================================IssueVoucher==========================================
    public static void IssueVoucher_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, IssueVoucher MASTER, List<IssueVoucherDetails> DTLS, ref List<StockRegister> STOCK, ref List<AccountsTransactions> ACC)

    {
      for (int i = 0; i < DTLS.Count; i++)
      {
        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

         // long ? StockRegisterId,
         0,
         //              string StockRegisterVoucherNo,
         "",
         //     string StockRegisterTransType,
         "",
          //      DateTime ? StockRegisterVoucherDate,
          MASTER.IssueVoucherDate,
         //     string StockRegisterRemarks,
         MASTER.IssueVoucherDescription,
        //     decimal ? StockRegisterSno,
        i,
            //       long ? StockRegisterMatId,
            DTLS[i].IssueVoucherDetailsMatId,

          //     int ? StockRegisterUnitId,
          DTLS[i].IssueVoucherDetailsUnitId,

         //     decimal ? StockRegisterQuantity,
         DTLS[i].IssueVoucherDetailsQuantity,
         //     decimal ? StockRegisterSin,
         DTLS[i].IssueVoucherDetailsQuantity,
         //     decimal ? StockRegisterSout,
         0,
          //     string StockRegisterStatus,
          "",
         //      string StockRegisterBatchCode,
         "",
         //     decimal ? StockRegisterRate,
         DTLS[i].IssueVoucherDetailsRate,
          //     decimal ? StockRegisterFcRate,
          DTLS[i].IssueVoucherDetailsRate,
         //   decimal ? StockRegisterAmount,
         DTLS[i].IssueVoucherDetailsRate * DTLS[i].IssueVoucherDetailsQuantity,
         //   decimal ? StockRegisterFCAmount,
         DTLS[i].IssueVoucherDetailsRate * DTLS[i].IssueVoucherDetailsQuantity,
          //     Double ? StockRegisterLandingCost,
          DTLS[i].IssueVoucherDetailsRate * DTLS[i].IssueVoucherDetailsQuantity,
           //int ? StockRegisterLocationID,
           MASTER.IssueVoucherLocationId,
          //      int ? StockRegisterFsno,
          1,
           //     int StockRegisterDepId,
           0,
            //       int StockRegisterJobId,
            MASTER.IssueVoucherJobId,

        //      DateTime ? StockRegisterExpDate,
        null,
          //     double ? StockRegisterNetStkBal,
          0,
         //      bool ? StockRegisterDelStatus
         false

            ));

      }


      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
   //  string ? AccountsTransactionsAccNo,
   MASTER.IssueVoucherCreditAccNo,//"STOCK"
                                  // DateTime ? AccountsTransactionsTransDate,
    MASTER.IssueVoucherDate,
//string AccountsTransactionsParticulars,
"STOCK" + MASTER.IssueVoucherDescription,
//decimal AccountsTransactionsDebit,
0,
  //decimal AccountsTransactionsCredit,
  Convert.ToDecimal(MASTER.IssueVoucherTotalGrossAmount),
 //decimal ? AccountsTransactionsFcDebit,
 0,
 //decimal ? AccountsTransactionsFcCredit,
 MASTER.IssueVoucherTotalGrossAmount,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.IssueVoucherNo,
           //string AccountsTransactionsDescription,
           MASTER.IssueVoucherDescription,
    //long AccountsTransactionsUserId,
    Convert.ToInt64(MASTER.IssueVoucherUserId),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.IssueVoucherRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToInt64(MASTER.IssueVoucherFsno),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
   //decimal ? AccountsTransactionsAllocBalance,
   MASTER.IssueVoucherTotalGrossAmount,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.IssueVoucherTotalGrossAmount,
   //int ? AccountsTransactionsLocation,
   MASTER.IssueVoucherLocationId,
 //long ? AccountsTransactionsJobNo,
 MASTER.IssueVoucherJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.IssueVoucherFcRate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.IssueVoucherCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.IssueVoucherCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.IssueVoucherDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
//  string AccountsTransactionsVatno,
"",
 //  decimal ? AccountsTransactionsVatableAmount,
 0,
//  bool ? AccountstransactionsDelStatus
false

));

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


              //          long AccountsTransactionsTransSno,
              0,
           //  string ? AccountsTransactionsAccNo,
           MASTER.IssueVoucherDebitAccNo,//"CASH"
                                         // DateTime ? AccountsTransactionsTransDate,
             MASTER.IssueVoucherDate,
         //string AccountsTransactionsParticulars,
         "CASH" + MASTER.IssueVoucherDescription,
         //decimal AccountsTransactionsDebit,
         Convert.ToDecimal(MASTER.IssueVoucherTotalGrossAmount),
       //decimal AccountsTransactionsCredit,
       0,
          //decimal ? AccountsTransactionsFcDebit,
          MASTER.IssueVoucherTotalGrossAmount,
          //decimal ? AccountsTransactionsFcCredit,
          0,
          //string AccountsTransactionsVoucherType,
          "",
                       //string AccountsTransactionsVoucherNo,
                       MASTER.IssueVoucherNo,
                    //string AccountsTransactionsDescription,
                    MASTER.IssueVoucherDescription,
                 //long AccountsTransactionsUserId,
                 Convert.ToInt64(MASTER.IssueVoucherUserId),
                //string AccountsTransactionsStatus,
                "",
                //DateTime AccountsTransactionsTstamp,
                DateTime.Now,
              //string RefNo,
              MASTER.IssueVoucherRefNo,
              //decimal AccountsTransactionsFsno,
              Convert.ToInt64(MASTER.IssueVoucherFsno),
            //decimal ? AccountsTransactionsAllocDebit,
            MASTER.IssueVoucherTotalGrossAmount,
            //decimal ? AccountsTransactionsAllocCredit,
            0,
            //decimal ? AccountsTransactionsAllocBalance,
            0,
            //decimal ? AccountsTransactionsFcAllocDebit,
            MASTER.IssueVoucherTotalGrossAmount,
            //decimal ? AccountsTransactionsFcAllocCredit,
            0,
            //decimal ? AccountsTransactionsFcAllocBalance,
            0,
            //int ? AccountsTransactionsLocation,
            MASTER.IssueVoucherLocationId,
          //long ? AccountsTransactionsJobNo,
          MASTER.IssueVoucherJobId,
              //long ? AccountsTransactionsCostCenterId,
              null,
              //DateTime ? AccountsTransactionsApprovalDt,
              DateTime.Now,
             //int ? AccountsTransactionsDepartment,
             null,
             //decimal ? AccountsTransactionsFcRate,
             MASTER.IssueVoucherFcRate,
            //int ? AccountsTransactionsCompanyId,
            MASTER.IssueVoucherCompanyId,
           //int ? AccountsTransactionsCurrencyId,
           MASTER.IssueVoucherCurrencyId,
          //double ? AccountsTransactionsDrGram,
          0,
          //double ? AccountsTransactionsCrGram,
          0,
          //string AccountsTransactionsCheqNo,
          null,
          //string AccountsTransactionsLpoNo,
          null,
          //DateTime ? AccountsTransactionsCheqDate,
          null,
          //string AccountsTransactionsOpposEntryDesc,
          MASTER.IssueVoucherDescription,
         //  double ? AccountsTransactionsAllocUpdateBal,
         0,
         // long ? AccountsTransactionsDeptId,
         0,
         //  string AccountsTransactionsVatno,
         "",
         //  decimal ? AccountsTransactionsVatableAmount,
         0,
         //  bool ? AccountstransactionsDelStatus
         false

    ));

    }

    //===================================IssueVoucher==========================================




    //===================================IssueReturn==========================================
    public static void IssueReturn_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, IssueReturn MASTER, List<IssueReturnDetails> DTLS, ref List<StockRegister> STOCK, ref List<AccountsTransactions> ACC)

    {
      for (int i = 0; i < DTLS.Count; i++)
      {
        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

         // long ? StockRegisterId,
         0,
         //              string StockRegisterVoucherNo,
         "",
         //     string StockRegisterTransType,
         "",
          //      DateTime ? StockRegisterVoucherDate,
          MASTER.IssueReturnDate,
         //     string StockRegisterRemarks,
         MASTER.IssueReturnDescription,
        //     decimal ? StockRegisterSno,
        i,
            //       long ? StockRegisterMatId,
            DTLS[i].IssueReturnDetailsMatId,

          //     int ? StockRegisterUnitId,
          DTLS[i].IssueReturnDetailsUnitId,

         //     decimal ? StockRegisterQuantity,
         DTLS[i].IssueReturnDetailsQuantity,
         //     decimal ? StockRegisterSin,
         0,
         //     decimal ? StockRegisterSout,
         DTLS[i].IssueReturnDetailsQuantity,
          //     string StockRegisterStatus,
          "",
         //      string StockRegisterBatchCode,
         "",
         //     decimal ? StockRegisterRate,
         DTLS[i].IssueReturnDetailsRate,
          //     decimal ? StockRegisterFcRate,
          DTLS[i].IssueReturnDetailsRate,
         //   decimal ? StockRegisterAmount,
         DTLS[i].IssueReturnDetailsRate * DTLS[i].IssueReturnDetailsQuantity,
         //   decimal ? StockRegisterFCAmount,
         DTLS[i].IssueReturnDetailsRate * DTLS[i].IssueReturnDetailsQuantity,
          //     Double ? StockRegisterLandingCost,
          DTLS[i].IssueReturnDetailsRate * DTLS[i].IssueReturnDetailsQuantity,
           //int ? StockRegisterLocationID,
           MASTER.IssueReturnLocationId,
          //      int ? StockRegisterFsno,
          1,
           //     int StockRegisterDepId,
           0,
            //       int StockRegisterJobId,
            MASTER.IssueReturnJobId,

        //      DateTime ? StockRegisterExpDate,
        null,
          //     double ? StockRegisterNetStkBal,
          0,
         //      bool ? StockRegisterDelStatus
         false

            ));
      }


      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
   //  string ? AccountsTransactionsAccNo,
   MASTER.IssueReturnDebitAccNo,//"STOCK"
                                // DateTime ? AccountsTransactionsTransDate,
    MASTER.IssueReturnDate,
//string AccountsTransactionsParticulars,
"STOCK" + MASTER.IssueReturnDescription,
//decimal AccountsTransactionsDebit,
Convert.ToDecimal(MASTER.IssueReturnTotalGrossAmount),
  //decimal AccountsTransactionsCredit,
  0,
 //decimal ? AccountsTransactionsFcDebit,
 MASTER.IssueReturnTotalGrossAmount,
 //decimal ? AccountsTransactionsFcCredit,
 0,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.IssueReturnNo,
           //string AccountsTransactionsDescription,
           MASTER.IssueReturnDescription,
    //long AccountsTransactionsUserId,
    Convert.ToInt64(MASTER.IssueReturnUserId),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.IssueReturnRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToInt64(MASTER.IssueReturnFsno),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
   //decimal ? AccountsTransactionsAllocBalance,
   MASTER.IssueReturnTotalGrossAmount,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.IssueReturnTotalGrossAmount,
   //int ? AccountsTransactionsLocation,
   MASTER.IssueReturnLocationId,
 //long ? AccountsTransactionsJobNo,
 MASTER.IssueReturnJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.IssueReturnFcRate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.IssueReturnCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.IssueReturnCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.IssueReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 "",
 //  decimal ? AccountsTransactionsVatableAmount,
 0,
//  bool ? AccountstransactionsDelStatus
false

));



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


              //          long AccountsTransactionsTransSno,
              0,
            //  string ? AccountsTransactionsAccNo,
            MASTER.IssueReturnCreditAccNo,//"CASH"
                                          // DateTime ? AccountsTransactionsTransDate,
             MASTER.IssueReturnDate,
         //string AccountsTransactionsParticulars,
         "CASH" + MASTER.IssueReturnDescription,
         //decimal AccountsTransactionsDebit,
         0,
       //decimal AccountsTransactionsCredit,
       Convert.ToDecimal(MASTER.IssueReturnTotalGrossAmount),
          //decimal ? AccountsTransactionsFcDebit,
          0,
          //decimal ? AccountsTransactionsFcCredit,
          MASTER.IssueReturnTotalGrossAmount,
          //string AccountsTransactionsVoucherType,
          "",
                       //string AccountsTransactionsVoucherNo,
                       MASTER.IssueReturnNo,
                    //string AccountsTransactionsDescription,
                    MASTER.IssueReturnDescription,
                 //long AccountsTransactionsUserId,
                 Convert.ToInt64(MASTER.IssueReturnUserId),
                //string AccountsTransactionsStatus,
                "",
                //DateTime AccountsTransactionsTstamp,
                DateTime.Now,
              //string RefNo,
              MASTER.IssueReturnRefNo,
              //decimal AccountsTransactionsFsno,
              Convert.ToInt64(MASTER.IssueReturnFsno),
            //decimal ? AccountsTransactionsAllocDebit,
            0,
            //decimal ? AccountsTransactionsAllocCredit,
            MASTER.IssueReturnTotalGrossAmount,
            //decimal ? AccountsTransactionsAllocBalance,
            0,
            //decimal ? AccountsTransactionsFcAllocDebit,
            0,
            //decimal ? AccountsTransactionsFcAllocCredit,
            MASTER.IssueReturnTotalGrossAmount,
            //decimal ? AccountsTransactionsFcAllocBalance,
            0,
            //int ? AccountsTransactionsLocation,
            MASTER.IssueReturnLocationId,
          //long ? AccountsTransactionsJobNo,
          MASTER.IssueReturnJobId,
              //long ? AccountsTransactionsCostCenterId,
              null,
              //DateTime ? AccountsTransactionsApprovalDt,
              DateTime.Now,
             //int ? AccountsTransactionsDepartment,
             null,
             //decimal ? AccountsTransactionsFcRate,
             MASTER.IssueReturnFcRate,
            //int ? AccountsTransactionsCompanyId,
            MASTER.IssueReturnCompanyId,
           //int ? AccountsTransactionsCurrencyId,
           MASTER.IssueReturnCurrencyId,
          //double ? AccountsTransactionsDrGram,
          0,
          //double ? AccountsTransactionsCrGram,
          0,
          //string AccountsTransactionsCheqNo,
          null,
          //string AccountsTransactionsLpoNo,
          null,
          //DateTime ? AccountsTransactionsCheqDate,
          null,
          //string AccountsTransactionsOpposEntryDesc,
          MASTER.IssueReturnDescription,
         //  double ? AccountsTransactionsAllocUpdateBal,
         0,
         // long ? AccountsTransactionsDeptId,
         0,
          //  string AccountsTransactionsVatno,
          "",
          //  decimal ? AccountsTransactionsVatableAmount,
          0,
         //  bool ? AccountstransactionsDelStatus
         false

    ));



    }

    //===================================IssueReturn==========================================



    //===================================SalesVoucher==========================================

    public static void SalesVoucher_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, SalesVoucher MASTER, List<SalesVoucherDetails> DTLS, ref List<StockRegister> STOCK, ref List<AccountsTransactions> ACC, List<UnitDetails> unitDetails)

    {

      for (int i = 0; i < DTLS.Count; i++)
      {
        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

         // long ? StockRegisterId,
         0,
         //              string StockRegisterVoucherNo,
         "",
         //     string StockRegisterTransType,
         "",
          //      DateTime ? StockRegisterVoucherDate,
          (DateTime)MASTER.SalesVoucherDate,
         //     string StockRegisterRemarks,
         MASTER.SalesVoucherDescription,
        //     decimal ? StockRegisterSno,
        i,
           //       long ? StockRegisterMatId,
           DTLS[i].SalesVoucherDetailsMatId,

          //     int ? StockRegisterUnitId,
          DTLS[i].SalesVoucherDetailsUnitId,

         //     decimal ? StockRegisterQuantity,
         DTLS[i].SalesVoucherDetailsQuantity,
         //     decimal ? StockRegisterSin,
         0,
         //     decimal ? StockRegisterSout,
         DTLS[i].SalesVoucherDetailsQuantity * Convert.ToDecimal(unitDetails[i].UnitDetailsConversionType),
          //     string StockRegisterStatus,
          "",
         //      string StockRegisterBatchCode,
         "",
         //     decimal ? StockRegisterRate,
         DTLS[i].SalesVoucherDetailsRate,
          //     decimal ? StockRegisterFcRate,
          DTLS[i].SalesVoucherDetailsRate,
         //   decimal ? StockRegisterAmount,
         DTLS[i].SalesVoucherDetailsRate * DTLS[i].SalesVoucherDetailsQuantity,
         //   decimal ? StockRegisterFCAmount,
         DTLS[i].SalesVoucherDetailsRate * DTLS[i].SalesVoucherDetailsQuantity,
          //     Double ? StockRegisterLandingCost,
          DTLS[i].SalesVoucherDetailsRate * DTLS[i].SalesVoucherDetailsQuantity,
           //int ? StockRegisterLocationID,
           MASTER.SalesVoucherLocationID,
          //      int ? StockRegisterFsno,
          1,
           //     int StockRegisterDepId,
           0,
            //       int StockRegisterJobId,
            MASTER.SalesVoucherJobId,

        //      DateTime ? StockRegisterExpDate,
        null,
          //     double ? StockRegisterNetStkBal,
          0,
         //      bool ? StockRegisterDelStatus
         false

            ));
      }
      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


  //          long AccountsTransactionsTransSno,
  0,
 //  string ? AccountsTransactionsAccNo,
 AccountSettings.COST_OF_FINISHED_GOODS,// "VAT"
                                        // DateTime ? AccountsTransactionsTransDate,
 (DateTime)MASTER.SalesVoucherDate,
//string AccountsTransactionsParticulars,
"FINISHED_GOODS" + MASTER.SalesVoucherDescription,
//decimal AccountsTransactionsDebit,
Convert.ToDecimal(MASTER.SalesVoucherTotalGrossAmount),
//decimal AccountsTransactionsCredit,
0,
//decimal ? AccountsTransactionsFcDebit,
MASTER.SalesVoucherTotalGrossAmount,
//decimal ? AccountsTransactionsFcCredit,
0,
//string AccountsTransactionsVoucherType,
"",
           //string AccountsTransactionsVoucherNo,
           MASTER.SalesVoucherNo,
        //string AccountsTransactionsDescription,
        MASTER.SalesVoucherDescription,
     //long AccountsTransactionsUserId,
     Convert.ToInt64(MASTER.SalesVoucherUserID),
    //string AccountsTransactionsStatus,
    "",
    //DateTime AccountsTransactionsTstamp,
    DateTime.Now,
  //string RefNo,
  MASTER.SalesVoucherRefNo,
 //decimal AccountsTransactionsFsno,
 Convert.ToDecimal(MASTER.SalesVoucherFSNO),
//decimal ? AccountsTransactionsAllocDebit,
0,
//decimal ? AccountsTransactionsAllocCredit,
0,
 //decimal ? AccountsTransactionsAllocBalance,
 MASTER.SalesVoucherTotalGrossAmount,
//decimal ? AccountsTransactionsFcAllocDebit,
0,
//decimal ? AccountsTransactionsFcAllocCredit,
0,
 //decimal ? AccountsTransactionsFcAllocBalance,
 MASTER.SalesVoucherTotalGrossAmount,
//int ? AccountsTransactionsLocation,
MASTER.SalesVoucherLocationID,
//long ? AccountsTransactionsJobNo,
MASTER.SalesVoucherJobId,
  //long ? AccountsTransactionsCostCenterId,
  null,
  //DateTime ? AccountsTransactionsApprovalDt,
  DateTime.Now,
 //int ? AccountsTransactionsDepartment,
 null,
 //decimal ? AccountsTransactionsFcRate,
 MASTER.SalesVoucherFc_Rate,
//int ? AccountsTransactionsCompanyId,
MASTER.SalesVoucherCompanyId,
//int ? AccountsTransactionsCurrencyId,
MASTER.SalesVoucherCurrencyId,
//double ? AccountsTransactionsDrGram,
0,
//double ? AccountsTransactionsCrGram,
0,
//string AccountsTransactionsCheqNo,
null,
//string AccountsTransactionsLpoNo,
null,
//DateTime ? AccountsTransactionsCheqDate,
null,
//string AccountsTransactionsOpposEntryDesc,
MASTER.SalesVoucherDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
//  string AccountsTransactionsVatno,
MASTER.SalesVoucherPartyVatNo,
//  decimal ? AccountsTransactionsVatableAmount,
MASTER.SalesVoucherTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


  //          long AccountsTransactionsTransSno,
  0,
 //  string ? AccountsTransactionsAccNo,
 AccountSettings.STOCK_ACCOUNT,// "STOCK"
                               // DateTime ? AccountsTransactionsTransDate,
 (DateTime)MASTER.SalesVoucherDate,
//string AccountsTransactionsParticulars,
"STOCK" + MASTER.SalesVoucherDescription,
//decimal AccountsTransactionsDebit,
0,
//decimal AccountsTransactionsCredit,
Convert.ToDecimal(MASTER.SalesVoucherTotalGrossAmount),
//decimal ? AccountsTransactionsFcDebit,
0,
//decimal ? AccountsTransactionsFcCredit,
MASTER.SalesVoucherTotalGrossAmount,
//string AccountsTransactionsVoucherType,
"",
           //string AccountsTransactionsVoucherNo,
           MASTER.SalesVoucherNo,
        //string AccountsTransactionsDescription,
        MASTER.SalesVoucherDescription,
     //long AccountsTransactionsUserId,
     Convert.ToInt64(MASTER.SalesVoucherUserID),
    //string AccountsTransactionsStatus,
    "",
    //DateTime AccountsTransactionsTstamp,
    DateTime.Now,
  //string RefNo,
  MASTER.SalesVoucherRefNo,
 //decimal AccountsTransactionsFsno,
 Convert.ToDecimal(MASTER.SalesVoucherFSNO),
//decimal ? AccountsTransactionsAllocDebit,
0,
//decimal ? AccountsTransactionsAllocCredit,
0,
 //decimal ? AccountsTransactionsAllocBalance,
 MASTER.SalesVoucherTotalGrossAmount,
//decimal ? AccountsTransactionsFcAllocDebit,
0,
//decimal ? AccountsTransactionsFcAllocCredit,
0,
 //decimal ? AccountsTransactionsFcAllocBalance,
 MASTER.SalesVoucherTotalGrossAmount,
//int ? AccountsTransactionsLocation,
MASTER.SalesVoucherLocationID,
//long ? AccountsTransactionsJobNo,
MASTER.SalesVoucherJobId,
  //long ? AccountsTransactionsCostCenterId,
  null,
  //DateTime ? AccountsTransactionsApprovalDt,
  DateTime.Now,
 //int ? AccountsTransactionsDepartment,
 null,
 //decimal ? AccountsTransactionsFcRate,
 MASTER.SalesVoucherFc_Rate,
//int ? AccountsTransactionsCompanyId,
MASTER.SalesVoucherCompanyId,
//int ? AccountsTransactionsCurrencyId,
MASTER.SalesVoucherCurrencyId,
//double ? AccountsTransactionsDrGram,
0,
//double ? AccountsTransactionsCrGram,
0,
//string AccountsTransactionsCheqNo,
null,
//string AccountsTransactionsLpoNo,
null,
//DateTime ? AccountsTransactionsCheqDate,
null,
//string AccountsTransactionsOpposEntryDesc,
MASTER.SalesVoucherDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
//  string AccountsTransactionsVatno,
MASTER.SalesVoucherPartyVatNo,
//  decimal ? AccountsTransactionsVatableAmount,
MASTER.SalesVoucherTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));
      if (MASTER.SalesVoucherTotalDisAmount != 0)
      {
        ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


          //          long AccountsTransactionsTransSno,
          0,
        //  string ? AccountsTransactionsAccNo,
        AccountSettings.DISC_ACC_NO,//"DISC"
                                    // DateTime ? AccountsTransactionsTransDate,
         (DateTime)MASTER.SalesVoucherDate,
     //string AccountsTransactionsParticulars,
     "DISC" + MASTER.SalesVoucherDescription,
     //decimal AccountsTransactionsDebit,
     Convert.ToDecimal(MASTER.SalesVoucherTotalDisAmount),
   //decimal AccountsTransactionsCredit,
   0,
      //decimal ? AccountsTransactionsFcDebit,
      MASTER.SalesVoucherTotalDisAmount,
      //decimal ? AccountsTransactionsFcCredit,
      0,
      //string AccountsTransactionsVoucherType,
      "",
                   //string AccountsTransactionsVoucherNo,
                   MASTER.SalesVoucherNo,
                //string AccountsTransactionsDescription,
                MASTER.SalesVoucherDescription,
             //long AccountsTransactionsUserId,
             Convert.ToInt64(MASTER.SalesVoucherUserID),
            //string AccountsTransactionsStatus,
            "",
            //DateTime AccountsTransactionsTstamp,
            DateTime.Now,
          //string RefNo,
          MASTER.SalesVoucherRefNo,
          //decimal AccountsTransactionsFsno,
          Convert.ToInt64(MASTER.SalesVoucherFSNO),
        //decimal ? AccountsTransactionsAllocDebit,
        MASTER.SalesVoucherTotalDisAmount,
        //decimal ? AccountsTransactionsAllocCredit,
        0,
        //decimal ? AccountsTransactionsAllocBalance,
        0,
        //decimal ? AccountsTransactionsFcAllocDebit,
        MASTER.SalesVoucherTotalDisAmount,
        //decimal ? AccountsTransactionsFcAllocCredit,
        0,
        //decimal ? AccountsTransactionsFcAllocBalance,
        0,
        //int ? AccountsTransactionsLocation,
        MASTER.SalesVoucherLocationID,
      //long ? AccountsTransactionsJobNo,
      MASTER.SalesVoucherJobId,
          //long ? AccountsTransactionsCostCenterId,
          null,
          //DateTime ? AccountsTransactionsApprovalDt,
          DateTime.Now,
         //int ? AccountsTransactionsDepartment,
         null,
         //decimal ? AccountsTransactionsFcRate,
         MASTER.SalesVoucherFc_Rate,
        //int ? AccountsTransactionsCompanyId,
        MASTER.SalesVoucherCompanyId,
       //int ? AccountsTransactionsCurrencyId,
       MASTER.SalesVoucherCurrencyId,
      //double ? AccountsTransactionsDrGram,
      0,
      //double ? AccountsTransactionsCrGram,
      0,
      //string AccountsTransactionsCheqNo,
      null,
      //string AccountsTransactionsLpoNo,
      null,
      //DateTime ? AccountsTransactionsCheqDate,
      null,
      //string AccountsTransactionsOpposEntryDesc,
      MASTER.SalesVoucherDescription,
     //  double ? AccountsTransactionsAllocUpdateBal,
     0,
     // long ? AccountsTransactionsDeptId,
     0,
      //  string AccountsTransactionsVatno,
      MASTER.SalesVoucherPartyVatNo,
      //  decimal ? AccountsTransactionsVatableAmount,
      MASTER.SalesVoucherTotalGrossAmount,
     //  bool ? AccountstransactionsDelStatus
     false

));
      }


      if (MASTER.SalesVoucherVat_RountAmt != 0)
      {
        ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


       //          long AccountsTransactionsTransSno,
       0,
      //  string ? AccountsTransactionsAccNo,
      AccountSettings.ROUND_OFF_ACCOUNT,//"ROUD OFF"
                                        // DateTime ? AccountsTransactionsTransDate,
      (DateTime)MASTER.SalesVoucherDate,
   //string AccountsTransactionsParticulars,
   "ROUD OFF" + MASTER.SalesVoucherDescription,
  //decimal AccountsTransactionsDebit,
  MASTER.SalesVoucherVat_RoundSign != "+" ? Convert.ToDecimal(MASTER.SalesVoucherVat_RountAmt) : 0,
      //decimal AccountsTransactionsCredit,
      MASTER.SalesVoucherVat_RoundSign != "-" ? Convert.ToDecimal(MASTER.SalesVoucherVat_RountAmt) : 0,
//decimal ? AccountsTransactionsFcDebit,
MASTER.SalesVoucherVat_RoundSign != "+" ? MASTER.SalesVoucherVat_RountAmt : 0,
    //decimal ? AccountsTransactionsFcCredit,
    MASTER.SalesVoucherVat_RoundSign != "-" ? MASTER.SalesVoucherVat_RountAmt : 0,
   //string AccountsTransactionsVoucherType,
   "",
                //string AccountsTransactionsVoucherNo,
                MASTER.SalesVoucherNo,
             //string AccountsTransactionsDescription,
             MASTER.SalesVoucherDescription,
          //long AccountsTransactionsUserId,
          Convert.ToInt64(MASTER.SalesVoucherUserID),
         //string AccountsTransactionsStatus,
         "",
         //DateTime AccountsTransactionsTstamp,
         DateTime.Now,
       //string RefNo,
       MASTER.SalesVoucherRefNo,
       //decimal AccountsTransactionsFsno,
       Convert.ToInt64(MASTER.SalesVoucherFSNO),
     //decimal ? AccountsTransactionsAllocDebit,
     0,
     //decimal ? AccountsTransactionsAllocCredit,
     0,
     //decimal ? AccountsTransactionsAllocBalance,
     MASTER.SalesVoucherVat_RountAmt,
     //decimal ? AccountsTransactionsFcAllocDebit,
     0,
     //decimal ? AccountsTransactionsFcAllocCredit,
     0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.SalesVoucherVat_RountAmt,
     //int ? AccountsTransactionsLocation,
     MASTER.SalesVoucherLocationID,
   //long ? AccountsTransactionsJobNo,
   MASTER.SalesVoucherJobId,
       //long ? AccountsTransactionsCostCenterId,
       null,
       //DateTime ? AccountsTransactionsApprovalDt,
       DateTime.Now,
      //int ? AccountsTransactionsDepartment,
      null,
      //decimal ? AccountsTransactionsFcRate,
      MASTER.SalesVoucherFc_Rate,
     //int ? AccountsTransactionsCompanyId,
     MASTER.SalesVoucherCompanyId,
    //int ? AccountsTransactionsCurrencyId,
    MASTER.SalesVoucherCurrencyId,
   //double ? AccountsTransactionsDrGram,
   0,
   //double ? AccountsTransactionsCrGram,
   0,
   //string AccountsTransactionsCheqNo,
   null,
   //string AccountsTransactionsLpoNo,
   null,
   //DateTime ? AccountsTransactionsCheqDate,
   null,
   //string AccountsTransactionsOpposEntryDesc,
   MASTER.SalesVoucherDescription,
  //  double ? AccountsTransactionsAllocUpdateBal,
  0,
  // long ? AccountsTransactionsDeptId,
  0,
   //  string AccountsTransactionsVatno,
   MASTER.SalesVoucherPartyVatNo,
   //  decimal ? AccountsTransactionsVatableAmount,
   MASTER.SalesVoucherTotalGrossAmount,
  //  bool ? AccountstransactionsDelStatus
  false

));

      }

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
    //  string ? AccountsTransactionsAccNo,
    AccountSettings.VAT_PAY_ACCOUNT,// "VAT"
                                    // DateTime ? AccountsTransactionsTransDate,
    (DateTime)MASTER.SalesVoucherDate,
 //string AccountsTransactionsParticulars,
 "VAT" + MASTER.SalesVoucherDescription,
//decimal AccountsTransactionsDebit,
0,
  //decimal AccountsTransactionsCredit,
  Convert.ToDecimal(MASTER.SalesVoucherVat_AMT),
  //decimal ? AccountsTransactionsFcDebit,
  0,
 //decimal ? AccountsTransactionsFcCredit,
 MASTER.SalesVoucherVat_AMT,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.SalesVoucherNo,
           //string AccountsTransactionsDescription,
           MASTER.SalesVoucherDescription,
        //long AccountsTransactionsUserId,
        Convert.ToInt64(MASTER.SalesVoucherUserID),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.SalesVoucherRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToDecimal(MASTER.SalesVoucherFSNO),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
    //decimal ? AccountsTransactionsAllocBalance,
    MASTER.SalesVoucherVat_AMT,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.SalesVoucherVat_AMT,
   //int ? AccountsTransactionsLocation,
   MASTER.SalesVoucherLocationID,
 //long ? AccountsTransactionsJobNo,
 MASTER.SalesVoucherJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.SalesVoucherFc_Rate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.SalesVoucherCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.SalesVoucherCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.SalesVoucherDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.SalesVoucherPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.SalesVoucherTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));


      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


                         //          long AccountsTransactionsTransSno,
                         0,
                       //  string ? AccountsTransactionsAccNo,
                       AccountSettings.PURCHASE_CASH_ACCOUNT,//"CASH"
                                                             // DateTime ? AccountsTransactionsTransDate,
                        (DateTime)MASTER.SalesVoucherDate,
                    //string AccountsTransactionsParticulars,
                    "CASH" + MASTER.SalesVoucherDescription,
                    //decimal AccountsTransactionsDebit,
                    Convert.ToDecimal(MASTER.SalesVoucherNetAmount),
                  //decimal AccountsTransactionsCredit,
                  0,
                     //decimal ? AccountsTransactionsFcDebit,
                     MASTER.SalesVoucherNetAmount,
                     //decimal ? AccountsTransactionsFcCredit,
                     0,
                     //string AccountsTransactionsVoucherType,
                     "",
                                  //string AccountsTransactionsVoucherNo,
                                  MASTER.SalesVoucherNo,
                               //string AccountsTransactionsDescription,
                               MASTER.SalesVoucherDescription,
                            //long AccountsTransactionsUserId,
                            Convert.ToInt64(MASTER.SalesVoucherUserID),
                           //string AccountsTransactionsStatus,
                           "",
                           //DateTime AccountsTransactionsTstamp,
                           DateTime.Now,
                         //string RefNo,
                         MASTER.SalesVoucherRefNo,
                         //decimal AccountsTransactionsFsno,
                         Convert.ToInt64(MASTER.SalesVoucherFSNO),
                       //decimal ? AccountsTransactionsAllocDebit,
                       MASTER.SalesVoucherNetAmount,
                       //decimal ? AccountsTransactionsAllocCredit,
                       0,
                       //decimal ? AccountsTransactionsAllocBalance,
                       0,
                       //decimal ? AccountsTransactionsFcAllocDebit,
                       MASTER.SalesVoucherNetAmount,
                       //decimal ? AccountsTransactionsFcAllocCredit,
                       0,
                       //decimal ? AccountsTransactionsFcAllocBalance,
                       0,
                       //int ? AccountsTransactionsLocation,
                       MASTER.SalesVoucherLocationID,
                     //long ? AccountsTransactionsJobNo,
                     MASTER.SalesVoucherJobId,
                         //long ? AccountsTransactionsCostCenterId,
                         null,
                         //DateTime ? AccountsTransactionsApprovalDt,
                         DateTime.Now,
                        //int ? AccountsTransactionsDepartment,
                        null,
                        //decimal ? AccountsTransactionsFcRate,
                        MASTER.SalesVoucherFc_Rate,
                       //int ? AccountsTransactionsCompanyId,
                       MASTER.SalesVoucherCompanyId,
                      //int ? AccountsTransactionsCurrencyId,
                      MASTER.SalesVoucherCurrencyId,
                     //double ? AccountsTransactionsDrGram,
                     0,
                     //double ? AccountsTransactionsCrGram,
                     0,
                     //string AccountsTransactionsCheqNo,
                     null,
                     //string AccountsTransactionsLpoNo,
                     null,
                     //DateTime ? AccountsTransactionsCheqDate,
                     null,
                     //string AccountsTransactionsOpposEntryDesc,
                     MASTER.SalesVoucherDescription,
                    //  double ? AccountsTransactionsAllocUpdateBal,
                    0,
                    // long ? AccountsTransactionsDeptId,
                    0,
                     //  string AccountsTransactionsVatno,
                     MASTER.SalesVoucherPartyVatNo,
                     //  decimal ? AccountsTransactionsVatableAmount,
                     MASTER.SalesVoucherTotalGrossAmount,
                    //  bool ? AccountstransactionsDelStatus
                    false

               ));



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
   //  string ? AccountsTransactionsAccNo,
   AccountSettings.SALESINCOME_ACC_NO,//"SALES INCOME"
                                      // DateTime ? AccountsTransactionsTransDate,
    (DateTime)MASTER.SalesVoucherDate,
//string AccountsTransactionsParticulars,
"SALES INCOME" + MASTER.SalesVoucherDescription,
//decimal AccountsTransactionsDebit,
0,
  //decimal AccountsTransactionsCredit,
  Convert.ToDecimal(MASTER.SalesVoucherTotalGrossAmount),
 //decimal ? AccountsTransactionsFcDebit,
 0,
 //decimal ? AccountsTransactionsFcCredit,
 MASTER.SalesVoucherTotalGrossAmount,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.SalesVoucherNo,
           //string AccountsTransactionsDescription,
           MASTER.SalesVoucherDescription,
    //long AccountsTransactionsUserId,
    Convert.ToInt64(MASTER.SalesVoucherUserID),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.SalesVoucherRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToInt64(MASTER.SalesVoucherFSNO),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
   //decimal ? AccountsTransactionsAllocBalance,
   MASTER.SalesVoucherTotalGrossAmount,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.SalesVoucherTotalGrossAmount,
   //int ? AccountsTransactionsLocation,
   MASTER.SalesVoucherLocationID,
 //long ? AccountsTransactionsJobNo,
 MASTER.SalesVoucherJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.SalesVoucherFc_Rate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.SalesVoucherCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.SalesVoucherCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.SalesVoucherDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.SalesVoucherPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.SalesVoucherTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));



    }




    //===================================SalesVoucher==========================================





    //===================================SalesReturn==========================================


    public static void SalesReturn_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, SalesReturn MASTER, List<SalesReturnDetails> DTLS, ref List<StockRegister> STOCK, ref List<AccountsTransactions> ACC)

    {



      for (int i = 0; i < DTLS.Count; i++)
      {
        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

         // long ? StockRegisterId,
         0,
         //              string StockRegisterVoucherNo,
         "",
         //     string StockRegisterTransType,
         "",
          //      DateTime ? StockRegisterVoucherDate,
           (DateTime)MASTER.SalesReturnDate,
         //     string StockRegisterRemarks,
         MASTER.SalesReturnDescription,
        //     decimal ? StockRegisterSno,
        i,
            //       long ? StockRegisterMatId,
            DTLS[i].SalesReturnDetailsMatId,

          //     int ? StockRegisterUnitId,
          DTLS[i].SalesReturnDetailsUnitId,

         //     decimal ? StockRegisterQuantity,
         DTLS[i].SalesReturnDetailsQuantity,
        //     decimal ? StockRegisterSin,
        0,
          //     decimal ? StockRegisterSout,
          DTLS[i].SalesReturnDetailsQuantity,
          //     string StockRegisterStatus,
          "",
         //      string StockRegisterBatchCode,
         "",
         //     decimal ? StockRegisterRate,
         DTLS[i].SalesReturnDetailsRate,
          //     decimal ? StockRegisterFcRate,
          DTLS[i].SalesReturnDetailsRate,
         //   decimal ? StockRegisterAmount,
         DTLS[i].SalesReturnDetailsRate * DTLS[i].SalesReturnDetailsQuantity,
         //   decimal ? StockRegisterFCAmount,
         DTLS[i].SalesReturnDetailsRate * DTLS[i].SalesReturnDetailsQuantity,
          //     Double ? StockRegisterLandingCost,
          DTLS[i].SalesReturnDetailsRate * DTLS[i].SalesReturnDetailsQuantity,
           //int ? StockRegisterLocationID,
           MASTER.SalesReturnLocationID,
          //      int ? StockRegisterFsno,
          1,
           //     int StockRegisterDepId,
           0,
            //       int StockRegisterJobId,
            MASTER.SalesReturnJobId,

        //      DateTime ? StockRegisterExpDate,
        null,
          //     double ? StockRegisterNetStkBal,
          0,
         //      bool ? StockRegisterDelStatus
         false

            ));

      }




      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


  0,
 AccountSettings.COST_OF_FINISHED_GOODS,// "VAT"
  (DateTime)MASTER.SalesReturnDate,
"FINISHED_GOODS" + MASTER.SalesReturnDescription,
//decimal AccountsTransactionsDebit,
0,
//decimal AccountsTransactionsCredit,
Convert.ToDecimal(MASTER.SalesReturnTotalGrossAmount),
//decimal ? AccountsTransactionsFcDebit,
0,
//decimal ? AccountsTransactionsFcCredit,
MASTER.SalesReturnTotalGrossAmount,
//string AccountsTransactionsVoucherType,
"",
           //string AccountsTransactionsVoucherNo,
           MASTER.SalesReturnNo,
        //string AccountsTransactionsDescription,
        MASTER.SalesReturnDescription,
     //long AccountsTransactionsUserId,
     Convert.ToInt64(MASTER.SalesReturnUserID),
    //string AccountsTransactionsStatus,
    "",
    //DateTime AccountsTransactionsTstamp,
    DateTime.Now,
  //string RefNo,
  MASTER.SalesReturnRefNo,
 //decimal AccountsTransactionsFsno,
 Convert.ToDecimal(MASTER.SalesReturnFSNO),
//decimal ? AccountsTransactionsAllocDebit,
0,
//decimal ? AccountsTransactionsAllocCredit,
0,
 //decimal ? AccountsTransactionsAllocBalance,
 MASTER.SalesReturnTotalGrossAmount,
//decimal ? AccountsTransactionsFcAllocDebit,
0,
//decimal ? AccountsTransactionsFcAllocCredit,
0,
 //decimal ? AccountsTransactionsFcAllocBalance,
 MASTER.SalesReturnTotalGrossAmount,
//int ? AccountsTransactionsLocation,
MASTER.SalesReturnLocationID,
//long ? AccountsTransactionsJobNo,
MASTER.SalesReturnJobId,
  //long ? AccountsTransactionsCostCenterId,
  null,
  //DateTime ? AccountsTransactionsApprovalDt,
  DateTime.Now,
 //int ? AccountsTransactionsDepartment,
 null,
 //decimal ? AccountsTransactionsFcRate,
 MASTER.SalesReturnFc_Rate,
//int ? AccountsTransactionsCompanyId,
MASTER.SalesReturnCompanyId,
//int ? AccountsTransactionsCurrencyId,
MASTER.SalesReturnCurrencyId,
//double ? AccountsTransactionsDrGram,
0,
//double ? AccountsTransactionsCrGram,
0,
//string AccountsTransactionsCheqNo,
null,
//string AccountsTransactionsLpoNo,
null,
//DateTime ? AccountsTransactionsCheqDate,
null,
//string AccountsTransactionsOpposEntryDesc,
MASTER.SalesReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
//  string AccountsTransactionsVatno,
MASTER.SalesReturnPartyVatNo,
//  decimal ? AccountsTransactionsVatableAmount,
MASTER.SalesReturnTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));



      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


  //          long AccountsTransactionsTransSno,
  0,
 //  string ? AccountsTransactionsAccNo,
 AccountSettings.STOCK_ACCOUNT,// "STOCK"
                               // DateTime ? AccountsTransactionsTransDate,
  (DateTime)MASTER.SalesReturnDate,
//string AccountsTransactionsParticulars,
"STOCK" + MASTER.SalesReturnDescription,
//decimal AccountsTransactionsDebit,
Convert.ToDecimal(MASTER.SalesReturnTotalGrossAmount),
//decimal AccountsTransactionsCredit,
0,
//decimal ? AccountsTransactionsFcDebit,
MASTER.SalesReturnTotalGrossAmount,
//decimal ? AccountsTransactionsFcCredit,
0,
//string AccountsTransactionsVoucherType,
"",
           //string AccountsTransactionsVoucherNo,
           MASTER.SalesReturnNo,
        //string AccountsTransactionsDescription,
        MASTER.SalesReturnDescription,
     //long AccountsTransactionsUserId,
     Convert.ToInt64(MASTER.SalesReturnUserID),
    //string AccountsTransactionsStatus,
    "",
    //DateTime AccountsTransactionsTstamp,
    DateTime.Now,
  //string RefNo,
  MASTER.SalesReturnRefNo,
 //decimal AccountsTransactionsFsno,
 Convert.ToDecimal(MASTER.SalesReturnFSNO),
//decimal ? AccountsTransactionsAllocDebit,
0,
//decimal ? AccountsTransactionsAllocCredit,
0,
 //decimal ? AccountsTransactionsAllocBalance,
 MASTER.SalesReturnTotalGrossAmount,
//decimal ? AccountsTransactionsFcAllocDebit,
0,
//decimal ? AccountsTransactionsFcAllocCredit,
0,
 //decimal ? AccountsTransactionsFcAllocBalance,
 MASTER.SalesReturnTotalGrossAmount,
//int ? AccountsTransactionsLocation,
MASTER.SalesReturnLocationID,
//long ? AccountsTransactionsJobNo,
MASTER.SalesReturnJobId,
  //long ? AccountsTransactionsCostCenterId,
  null,
  //DateTime ? AccountsTransactionsApprovalDt,
  DateTime.Now,
 //int ? AccountsTransactionsDepartment,
 null,
 //decimal ? AccountsTransactionsFcRate,
 MASTER.SalesReturnFc_Rate,
//int ? AccountsTransactionsCompanyId,
MASTER.SalesReturnCompanyId,
//int ? AccountsTransactionsCurrencyId,
MASTER.SalesReturnCurrencyId,
//double ? AccountsTransactionsDrGram,
0,
//double ? AccountsTransactionsCrGram,
0,
//string AccountsTransactionsCheqNo,
null,
//string AccountsTransactionsLpoNo,
null,
//DateTime ? AccountsTransactionsCheqDate,
null,
//string AccountsTransactionsOpposEntryDesc,
MASTER.SalesReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
//  string AccountsTransactionsVatno,
MASTER.SalesReturnPartyVatNo,
//  decimal ? AccountsTransactionsVatableAmount,
MASTER.SalesReturnTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));

//      if (MASTER.SalesReturnTotalDisAmount != 0)
//      {
//        ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


//          //          long AccountsTransactionsTransSno,
//          0,
//        //  string ? AccountsTransactionsAccNo,
//        AccountSettings.DISC_ACC_NO,//"DISC"
//                                    // DateTime ? AccountsTransactionsTransDate,
//         (DateTime)MASTER.SalesReturnDate,
//     //string AccountsTransactionsParticulars,
//     "DISC" + MASTER.SalesReturnDescription,
//     //decimal AccountsTransactionsDebit,
//     0,
//   //decimal AccountsTransactionsCredit,
//   Convert.ToDecimal(MASTER.SalesReturnTotalDisAmount),
//     //decimal ? AccountsTransactionsFcDebit,
//     0,
//       //decimal ? AccountsTransactionsFcCredit,
//       MASTER.SalesReturnTotalDisAmount,
//      //string AccountsTransactionsVoucherType,
//      "",
//                   //string AccountsTransactionsVoucherNo,
//                   MASTER.SalesReturnNo,
//                //string AccountsTransactionsDescription,
//                MASTER.SalesReturnDescription,
//             //long AccountsTransactionsUserId,
//             Convert.ToInt64(MASTER.SalesReturnUserID),
//            //string AccountsTransactionsStatus,
//            "",
//            //DateTime AccountsTransactionsTstamp,
//            DateTime.Now,
//          //string RefNo,
//          MASTER.SalesReturnRefNo,
//          //decimal AccountsTransactionsFsno,
//          Convert.ToInt64(MASTER.SalesReturnFSNO),
//        //decimal ? AccountsTransactionsAllocDebit,
//        MASTER.SalesReturnTotalDisAmount,
//        //decimal ? AccountsTransactionsAllocCredit,
//        0,
//        //decimal ? AccountsTransactionsAllocBalance,
//        0,
//        //decimal ? AccountsTransactionsFcAllocDebit,
//        MASTER.SalesReturnTotalDisAmount,
//        //decimal ? AccountsTransactionsFcAllocCredit,
//        0,
//        //decimal ? AccountsTransactionsFcAllocBalance,
//        0,
//        //int ? AccountsTransactionsLocation,
//        MASTER.SalesReturnLocationID,
//      //long ? AccountsTransactionsJobNo,
//      MASTER.SalesReturnJobId,
//          //long ? AccountsTransactionsCostCenterId,
//          null,
//          //DateTime ? AccountsTransactionsApprovalDt,
//          DateTime.Now,
//         //int ? AccountsTransactionsDepartment,
//         null,
//         //decimal ? AccountsTransactionsFcRate,
//         MASTER.SalesReturnFc_Rate,
//        //int ? AccountsTransactionsCompanyId,
//        MASTER.SalesReturnCompanyId,
//       //int ? AccountsTransactionsCurrencyId,
//       MASTER.SalesReturnCurrencyId,
//      //double ? AccountsTransactionsDrGram,
//      0,
//      //double ? AccountsTransactionsCrGram,
//      0,
//      //string AccountsTransactionsCheqNo,
//      null,
//      //string AccountsTransactionsLpoNo,
//      null,
//      //DateTime ? AccountsTransactionsCheqDate,
//      null,
//      //string AccountsTransactionsOpposEntryDesc,
//      MASTER.SalesReturnDescription,
//     //  double ? AccountsTransactionsAllocUpdateBal,
//     0,
//     // long ? AccountsTransactionsDeptId,
//     0,
//      //  string AccountsTransactionsVatno,
//      MASTER.SalesReturnPartyVatNo,
//      //  decimal ? AccountsTransactionsVatableAmount,
//      MASTER.SalesReturnTotalGrossAmount,
//     //  bool ? AccountstransactionsDelStatus
//     false

//));
//      }

//      if (MASTER.SalesReturnVat_RountAmt != 0)
//      {
//        ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


//       //          long AccountsTransactionsTransSno,
//       0,
//      //  string ? AccountsTransactionsAccNo,
//      AccountSettings.ROUND_OFF_ACCOUNT,//"ROUD OFF"
//                                        // DateTime ? AccountsTransactionsTransDate,
//       (DateTime)MASTER.SalesReturnDate,
//   //string AccountsTransactionsParticulars,
//   "ROUD OFF" + MASTER.SalesReturnDescription,
//  //decimal AccountsTransactionsDebit,
//  MASTER.SalesReturnVat_RoundSign != "-" ? Convert.ToDecimal(MASTER.SalesReturnVat_RountAmt) : 0,
//      //decimal AccountsTransactionsCredit,
//      MASTER.SalesReturnVat_RoundSign != "+" ? Convert.ToDecimal(MASTER.SalesReturnVat_RountAmt) : 0,
////decimal ? AccountsTransactionsFcDebit,
//MASTER.SalesReturnVat_RoundSign != "-" ? MASTER.SalesReturnVat_RountAmt : 0,
//    //decimal ? AccountsTransactionsFcCredit,
//    MASTER.SalesReturnVat_RoundSign != "+" ? MASTER.SalesReturnVat_RountAmt : 0,
//   //string AccountsTransactionsVoucherType,
//   "",
//                //string AccountsTransactionsVoucherNo,
//                MASTER.SalesReturnNo,
//             //string AccountsTransactionsDescription,
//             MASTER.SalesReturnDescription,
//          //long AccountsTransactionsUserId,
//          Convert.ToInt64(MASTER.SalesReturnUserID),
//         //string AccountsTransactionsStatus,
//         "",
//         //DateTime AccountsTransactionsTstamp,
//         DateTime.Now,
//       //string RefNo,
//       MASTER.SalesReturnRefNo,
//       //decimal AccountsTransactionsFsno,
//       Convert.ToInt64(MASTER.SalesReturnFSNO),
//     //decimal ? AccountsTransactionsAllocDebit,
//     0,
//     //decimal ? AccountsTransactionsAllocCredit,
//     0,
//     //decimal ? AccountsTransactionsAllocBalance,
//     MASTER.SalesReturnVat_RountAmt,
//     //decimal ? AccountsTransactionsFcAllocDebit,
//     0,
//     //decimal ? AccountsTransactionsFcAllocCredit,
//     0,
//    //decimal ? AccountsTransactionsFcAllocBalance,
//    MASTER.SalesReturnVat_RountAmt,
//     //int ? AccountsTransactionsLocation,
//     MASTER.SalesReturnLocationID,
//   //long ? AccountsTransactionsJobNo,
//   MASTER.SalesReturnJobId,
//       //long ? AccountsTransactionsCostCenterId,
//       null,
//       //DateTime ? AccountsTransactionsApprovalDt,
//       DateTime.Now,
//      //int ? AccountsTransactionsDepartment,
//      null,
//      //decimal ? AccountsTransactionsFcRate,
//      MASTER.SalesReturnFc_Rate,
//     //int ? AccountsTransactionsCompanyId,
//     MASTER.SalesReturnCompanyId,
//    //int ? AccountsTransactionsCurrencyId,
//    MASTER.SalesReturnCurrencyId,
//   //double ? AccountsTransactionsDrGram,
//   0,
//   //double ? AccountsTransactionsCrGram,
//   0,
//   //string AccountsTransactionsCheqNo,
//   null,
//   //string AccountsTransactionsLpoNo,
//   null,
//   //DateTime ? AccountsTransactionsCheqDate,
//   null,
//   //string AccountsTransactionsOpposEntryDesc,
//   MASTER.SalesReturnDescription,
//  //  double ? AccountsTransactionsAllocUpdateBal,
//  0,
//  // long ? AccountsTransactionsDeptId,
//  0,
//   //  string AccountsTransactionsVatno,
//   MASTER.SalesReturnPartyVatNo,
//   //  decimal ? AccountsTransactionsVatableAmount,
//   MASTER.SalesReturnTotalGrossAmount,
//  //  bool ? AccountstransactionsDelStatus
//  false

//));

//      }

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
    //  string ? AccountsTransactionsAccNo,
    AccountSettings.VAT_REC_ACCOUNT,// "VAT"
                                    // DateTime ? AccountsTransactionsTransDate,
     (DateTime)MASTER.SalesReturnDate,
 //string AccountsTransactionsParticulars,
 "VAT" + MASTER.SalesReturnDescription,
//decimal AccountsTransactionsDebit,
Convert.ToDecimal(MASTER.SalesReturnVat_AMT),
  //decimal AccountsTransactionsCredit,
  0,
  //decimal ? AccountsTransactionsFcDebit,
  MASTER.SalesReturnVat_AMT,
//decimal ? AccountsTransactionsFcCredit,
0,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.SalesReturnNo,
           //string AccountsTransactionsDescription,
           MASTER.SalesReturnDescription,
        //long AccountsTransactionsUserId,
        Convert.ToInt64(MASTER.SalesReturnUserID),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.SalesReturnRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToDecimal(MASTER.SalesReturnFSNO),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
    //decimal ? AccountsTransactionsAllocBalance,
    MASTER.SalesReturnVat_AMT,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.SalesReturnVat_AMT,
   //int ? AccountsTransactionsLocation,
   MASTER.SalesReturnLocationID,
 //long ? AccountsTransactionsJobNo,
 MASTER.SalesReturnJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.SalesReturnFc_Rate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.SalesReturnCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.SalesReturnCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.SalesReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.SalesReturnPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.SalesReturnTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


                         //          long AccountsTransactionsTransSno,
                         0,
                       //  string ? AccountsTransactionsAccNo,
                       AccountSettings.SALES_CASH_ACCOUNT,//"CASH"
                                                          // DateTime ? AccountsTransactionsTransDate,
                         (DateTime)MASTER.SalesReturnDate,
                    //string AccountsTransactionsParticulars,
                    "CASH" + MASTER.SalesReturnDescription,
                   //decimal AccountsTransactionsDebit,
                   0,
                   //decimal AccountsTransactionsCredit,
                   Convert.ToDecimal(MASTER.SalesReturnNetAmount),
                     //decimal ? AccountsTransactionsFcDebit,
                     0,
                     //decimal ? AccountsTransactionsFcCredit,
                     MASTER.SalesReturnNetAmount,
                     //string AccountsTransactionsVoucherType,
                     "",
                                  //string AccountsTransactionsVoucherNo,
                                  MASTER.SalesReturnNo,
                               //string AccountsTransactionsDescription,
                               MASTER.SalesReturnDescription,
                            //long AccountsTransactionsUserId,
                            Convert.ToInt64(MASTER.SalesReturnUserID),
                           //string AccountsTransactionsStatus,
                           "",
                           //DateTime AccountsTransactionsTstamp,
                           DateTime.Now,
                         //string RefNo,
                         MASTER.SalesReturnRefNo,
                         //decimal AccountsTransactionsFsno,
                         Convert.ToInt64(MASTER.SalesReturnFSNO),
                       //decimal ? AccountsTransactionsAllocDebit,
                       0,
                       //decimal ? AccountsTransactionsAllocCredit,
                       MASTER.SalesReturnNetAmount,
                       //decimal ? AccountsTransactionsAllocBalance,
                       0,
                     //decimal ? AccountsTransactionsFcAllocDebit,
                     0,
                         //decimal ? AccountsTransactionsFcAllocCredit,
                         MASTER.SalesReturnNetAmount,
                       //decimal ? AccountsTransactionsFcAllocBalance,
                       0,
                       //int ? AccountsTransactionsLocation,
                       MASTER.SalesReturnLocationID,
                     //long ? AccountsTransactionsJobNo,
                     MASTER.SalesReturnJobId,
                         //long ? AccountsTransactionsCostCenterId,
                         null,
                         //DateTime ? AccountsTransactionsApprovalDt,
                         DateTime.Now,
                        //int ? AccountsTransactionsDepartment,
                        null,
                        //decimal ? AccountsTransactionsFcRate,
                        MASTER.SalesReturnFc_Rate,
                       //int ? AccountsTransactionsCompanyId,
                       MASTER.SalesReturnCompanyId,
                      //int ? AccountsTransactionsCurrencyId,
                      MASTER.SalesReturnCurrencyId,
                     //double ? AccountsTransactionsDrGram,
                     0,
                     //double ? AccountsTransactionsCrGram,
                     0,
                     //string AccountsTransactionsCheqNo,
                     null,
                     //string AccountsTransactionsLpoNo,
                     null,
                     //DateTime ? AccountsTransactionsCheqDate,
                     null,
                     //string AccountsTransactionsOpposEntryDesc,
                     MASTER.SalesReturnDescription,
                    //  double ? AccountsTransactionsAllocUpdateBal,
                    0,
                    // long ? AccountsTransactionsDeptId,
                    0,
                     //  string AccountsTransactionsVatno,
                     MASTER.SalesReturnPartyVatNo,
                     //  decimal ? AccountsTransactionsVatableAmount,
                     MASTER.SalesReturnTotalGrossAmount,
                    //  bool ? AccountstransactionsDelStatus
                    false

               ));

      ACC.Add(clsCommonFunctions.AddNewEntry_To_AccountsTransactions(


     //          long AccountsTransactionsTransSno,
     0,
   //  string ? AccountsTransactionsAccNo,
   AccountSettings.SALES_RETURN_ACC_NO,//SALES_RETURN"
                                       // DateTime ? AccountsTransactionsTransDate,
     (DateTime)MASTER.SalesReturnDate,
//string AccountsTransactionsParticulars,
"SALES_RETURN" + MASTER.SalesReturnDescription,
//decimal AccountsTransactionsDebit,
Convert.ToDecimal(MASTER.SalesReturnTotalGrossAmount),
  //decimal AccountsTransactionsCredit,
  0,
//decimal ? AccountsTransactionsFcDebit,
MASTER.SalesReturnTotalGrossAmount,
 //decimal ? AccountsTransactionsFcCredit,
 0,
 //string AccountsTransactionsVoucherType,
 "",
              //string AccountsTransactionsVoucherNo,
              MASTER.SalesReturnNo,
           //string AccountsTransactionsDescription,
           MASTER.SalesReturnDescription,
    //long AccountsTransactionsUserId,
    Convert.ToInt64(MASTER.SalesReturnUserID),
       //string AccountsTransactionsStatus,
       "",
       //DateTime AccountsTransactionsTstamp,
       DateTime.Now,
     //string RefNo,
     MASTER.SalesReturnRefNo,
    //decimal AccountsTransactionsFsno,
    Convert.ToInt64(MASTER.SalesReturnFSNO),
   //decimal ? AccountsTransactionsAllocDebit,
   0,
   //decimal ? AccountsTransactionsAllocCredit,
   0,
   //decimal ? AccountsTransactionsAllocBalance,
   MASTER.SalesReturnTotalGrossAmount,
   //decimal ? AccountsTransactionsFcAllocDebit,
   0,
   //decimal ? AccountsTransactionsFcAllocCredit,
   0,
    //decimal ? AccountsTransactionsFcAllocBalance,
    MASTER.SalesReturnTotalGrossAmount,
   //int ? AccountsTransactionsLocation,
   MASTER.SalesReturnLocationID,
 //long ? AccountsTransactionsJobNo,
 MASTER.SalesReturnJobId,
     //long ? AccountsTransactionsCostCenterId,
     null,
     //DateTime ? AccountsTransactionsApprovalDt,
     DateTime.Now,
    //int ? AccountsTransactionsDepartment,
    null,
    //decimal ? AccountsTransactionsFcRate,
    MASTER.SalesReturnFc_Rate,
   //int ? AccountsTransactionsCompanyId,
   MASTER.SalesReturnCompanyId,
  //int ? AccountsTransactionsCurrencyId,
  MASTER.SalesReturnCurrencyId,
 //double ? AccountsTransactionsDrGram,
 0,
 //double ? AccountsTransactionsCrGram,
 0,
 //string AccountsTransactionsCheqNo,
 null,
 //string AccountsTransactionsLpoNo,
 null,
 //DateTime ? AccountsTransactionsCheqDate,
 null,
 //string AccountsTransactionsOpposEntryDesc,
 MASTER.SalesReturnDescription,
//  double ? AccountsTransactionsAllocUpdateBal,
0,
// long ? AccountsTransactionsDeptId,
0,
 //  string AccountsTransactionsVatno,
 MASTER.SalesReturnPartyVatNo,
 //  decimal ? AccountsTransactionsVatableAmount,
 MASTER.SalesReturnTotalGrossAmount,
//  bool ? AccountstransactionsDelStatus
false

));
    }

        //===================================SalesReturn==========================================


        //===================================StockTransfer==========================================
        public static void StockTransfer_Accounts_STOCK_Transactions(string VoucherNo, string VoucherType, StockTransfer MASTER, List<StockTransferDetails> DTLS, ref List<StockRegister> STOCK)

        {
            for (int i = 0; i < DTLS.Count; i++)
            {
                try
                {
                   
                        STOCK.Add(clsCommonFunctions.AddNewEntry_To_StockRegister(

                                   // long ? StockRegisterId,
                                   0,
                                   //              string StockRegisterVoucherNo,
                                   "",
                                   //     string StockRegisterTransType,
                                   "",
                                   //      DateTime ? StockRegisterVoucherDate,
                                   (DateTime)MASTER.StockTransferStDate,
                                   //     string StockRegisterRemarks,
                                   MASTER.StockTransferNarration,
                                  //     decimal ? StockRegisterSno,
                                  i,
                                      //       long ? StockRegisterMatId,
                                      DTLS[i].StockTransferDetailsMaterialId,

                                    //     int ? StockRegisterUnitId,
                                    DTLS[i].StockTransferDetailsUnitId,

                                  //     decimal ? StockRegisterQuantity,
                                  (decimal)DTLS[i].StockTransferDetailsQty,
                                  //     decimal ? StockRegisterSin,
                                  (decimal)DTLS[i].StockTransferDetailsQty,
                                   //     decimal ? StockRegisterSout,
                                   0,
                                    //     string StockRegisterStatus,
                                    "",
                                   //      string StockRegisterBatchCode,
                                   "",
                                   //     decimal ? StockRegisterRate,
                                   (decimal)DTLS[i].StockTransferDetailsRate,
                                    //     decimal ? StockRegisterFcRate,
                                    (decimal)DTLS[i].StockTransferDetailsRate,
                                   //   decimal ? StockRegisterAmount,
                                   (decimal)DTLS[i].StockTransferDetailsRate * (decimal)DTLS[i].StockTransferDetailsQty,
                                   //   decimal ? StockRegisterFCAmount,
                                   (decimal)DTLS[i].StockTransferDetailsRate * (decimal)DTLS[i].StockTransferDetailsQty,
                                     //     Double ? StockRegisterLandingCost,
                                     (decimal)DTLS[i].StockTransferDetailsRate * (decimal)DTLS[i].StockTransferDetailsQty,
                                     //int ? StockRegisterLocationID,
                                     MASTER.StockTransferLocationIdFrom,
                                    //      int ? StockRegisterFsno,
                                    1,
                                     //     int StockRegisterDepId,
                                     0,
                                      //       int StockRegisterJobId,
                                      MASTER.StockTransferJobId,

                                  //      DateTime ? StockRegisterExpDate,
                                  null,
                                    //     double ? StockRegisterNetStkBal,
                                    0,
                                   //      bool ? StockRegisterDelStatus
                                   false

                                      ));

              
                }
                catch (Exception ex)
                {

                    var s=ex.ToString();
                }
               
            }

        }

    }
}
